// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    // get instruction type:
    Not(in=instruction[15], out= aInstruction); // True when instruction[15] == 0
    Not(in=aInstruction, out= cInstruction); // True when instruction[15] == 1

    // A register load:
    Or(a=aInstruction, b=instruction[5], out=ALoad);
    ARegister(in=Amux, load=ALoad, out=AOut, out[0..14]=addressM); // loads if instruction[15] == 0 or instruction[5] == 1

    // D register load:
    And(a=cInstruction, b=instruction[4], out=DLoad);
    DRegister(in=aluOut, load=DLoad, out=DOut);  // loads if instruction[4] == 1 and instruction[15] == 1

    And(a=cInstruction, b=instruction[3], out=writeM);

    // data transfer logic:
    Mux16(a=aluOut, b=instruction, sel=aInstruction, out=Amux);  // outputs instruction or ALU to A Register input
    Mux16(a=AOut, b=inM, sel=instruction[12], out=ALUmux);  // outputs A or M to ALU input

    ExtendAlu(x=DOut, y=ALUmux, instruction[0..5]=instruction[6..11], instruction[6]=false, instruction[7]=instruction[15], instruction[8]=instruction[14], out=aluOut, out=outM, zr=ALUzr, ng=ALUng);

    // jump logic:
    Not(in=ALUng, out=zeropos);
    Not(in=ALUzr, out=notzero);
    And(a=zeropos, b=notzero, out=ALUpos);

    And(a=instruction[0], b=ALUpos, out=jpos);
    And(a=jpos, b=cInstruction, out=JGT);

    And(a=instruction[1], b=ALUzr, out=jzero);
    And(a=jzero, b=cInstruction, out=JEQ);

    And(a=instruction[2], b=ALUng, out=jneg);
    And(a=jneg, b=cInstruction, out=JLT);

    Or(a=JEQ, b=JLT, out=JLE);
    Or(a=JLE, b=JGT, out=jump);
    PC(in=AOut, load=jump, inc=true, reset=reset, out[0..14]=pc);
}
