// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).


// The ExtendAlu chip is an extension of the standard ALU which also supports
// shift operations.
// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1, the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x".
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     // out:
     And(a=instruction[8], b=instruction[7], out=ogALU);  // og ALU if True

     Not(in=instruction[8], out=not8);
     And(a=not8, b=instruction[7], out=isShift);  // Extended ALU if True

     // if no shift (original ALU):
     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=aluOut, zr=ALUzr, ng=ALUng);

     // if shift:
     Mux16(a=y, b=x, sel=instruction[4], out=toshift);  // determine which input to shift

     ShiftRight(in=toshift, out=shiftedRight);
     ShiftLeft(in=toshift, out=shiftedLeft);
     Mux16(a=shiftedRight, b=shiftedLeft, sel=instruction[5], out=shifted);  // outputs the shifted object in the requested direction

     // output the shifted object or the original-ALU output object:
     Mux16(a=aluOut, b=shifted, sel=isShift, out=out, out[0..7]=out1, out[8..15]=out2, out[15]=allout);

     // zr:
     Or8Way(in=out1, out=out1res);
     Or8Way(in=out2, out=out2res);
     Or(a=out1res, b=out2res, out=outres);
     Mux(a=true, b=false, sel=outres, out=zr);
     
     // ng:
     FullAdder(a=allout, b=true, sum=overflow, carry=ng);
}
