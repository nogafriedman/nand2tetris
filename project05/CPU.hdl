// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // instruction[0..2] - Jump bits
    // instruction[3..5] - Destination load bits
    // instruction[6..11] - C instruction (ALU control bits)
    // instruction[12] - if a==0 A output, if a==1 inM (ALU control bits)
    // instruction[15] - Instruction type (1 for C, 0 for A)

    // get instruction type:
    Not(in=instruction[15], out= aInstruction); // True when instruction[15] == 0
    Not(in=aInstruction, out= cInstruction); // True when instruction[15] == 1

    // A register load:
    Or(a=aInstruction, b=instruction[5], out=ALoad);
    ARegister(in=Amux, load=ALoad, out=AOut, out[0..14]=addressM); // loads if instruction[15] == 0 or instruction[5] == 1

    // D register load:
    And(a=cInstruction, b=instruction[4], out=DLoad);
    DRegister(in=aluOut, load=DLoad, out=DOut);  // loads if instruction[4] == 1 and instruction[15] == 1

    And(a=cInstruction, b=instruction[3], out=writeM);

    // data transfer logic:
    Mux16(a=aluOut, b=instruction, sel=aInstruction, out=Amux);  // outputs instruction or ALU to A Register input
    Mux16(a=AOut, b=inM, sel=instruction[12], out=ALUmux);  // outputs A or M to ALU input

    ALU(x=DOut, y=ALUmux, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=ALUzr, ng=ALUng);

    // jump logic:
    Not(in=ALUng, out=zeropos);
    Not(in=ALUzr, out=notzero);
    And(a=zeropos, b=notzero, out=ALUpos);

    And(a=instruction[0], b=ALUpos, out=jpos);
    And(a=jpos, b=cInstruction, out=JGT);

    And(a=instruction[1], b=ALUzr, out=jzero);
    And(a=jzero, b=cInstruction, out=JEQ);

    And(a=instruction[2], b=ALUng, out=jneg);
    And(a=jneg, b=cInstruction, out=JLT);

    Or(a=JEQ, b=JLT, out=JLE);
    Or(a=JLE, b=JGT, out=jump);
    PC(in=AOut, load=jump, inc=true, reset=reset, out[0..14]=pc);
}